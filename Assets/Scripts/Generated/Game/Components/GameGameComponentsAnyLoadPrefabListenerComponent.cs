//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public GameComponentsAnyLoadPrefabListenerComponent gameComponentsAnyLoadPrefabListener { get { return (GameComponentsAnyLoadPrefabListenerComponent)GetComponent(GameComponentsLookup.GameComponentsAnyLoadPrefabListener); } }
    public bool hasGameComponentsAnyLoadPrefabListener { get { return HasComponent(GameComponentsLookup.GameComponentsAnyLoadPrefabListener); } }

    public void AddGameComponentsAnyLoadPrefabListener(System.Collections.Generic.List<IGameComponentsAnyLoadPrefabListener> newValue) {
        var index = GameComponentsLookup.GameComponentsAnyLoadPrefabListener;
        var component = (GameComponentsAnyLoadPrefabListenerComponent)CreateComponent(index, typeof(GameComponentsAnyLoadPrefabListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceGameComponentsAnyLoadPrefabListener(System.Collections.Generic.List<IGameComponentsAnyLoadPrefabListener> newValue) {
        var index = GameComponentsLookup.GameComponentsAnyLoadPrefabListener;
        var component = (GameComponentsAnyLoadPrefabListenerComponent)CreateComponent(index, typeof(GameComponentsAnyLoadPrefabListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveGameComponentsAnyLoadPrefabListener() {
        RemoveComponent(GameComponentsLookup.GameComponentsAnyLoadPrefabListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGameComponentsAnyLoadPrefabListener;

    public static Entitas.IMatcher<GameEntity> GameComponentsAnyLoadPrefabListener {
        get {
            if (_matcherGameComponentsAnyLoadPrefabListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GameComponentsAnyLoadPrefabListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGameComponentsAnyLoadPrefabListener = matcher;
            }

            return _matcherGameComponentsAnyLoadPrefabListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddGameComponentsAnyLoadPrefabListener(IGameComponentsAnyLoadPrefabListener value) {
        var listeners = hasGameComponentsAnyLoadPrefabListener
            ? gameComponentsAnyLoadPrefabListener.value
            : new System.Collections.Generic.List<IGameComponentsAnyLoadPrefabListener>();
        listeners.Add(value);
        ReplaceGameComponentsAnyLoadPrefabListener(listeners);
    }

    public void RemoveGameComponentsAnyLoadPrefabListener(IGameComponentsAnyLoadPrefabListener value, bool removeComponentWhenEmpty = true) {
        var listeners = gameComponentsAnyLoadPrefabListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveGameComponentsAnyLoadPrefabListener();
        } else {
            ReplaceGameComponentsAnyLoadPrefabListener(listeners);
        }
    }
}
