//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public GameComponentsLoadSpriteListenerComponent gameComponentsLoadSpriteListener { get { return (GameComponentsLoadSpriteListenerComponent)GetComponent(GameComponentsLookup.GameComponentsLoadSpriteListener); } }
    public bool hasGameComponentsLoadSpriteListener { get { return HasComponent(GameComponentsLookup.GameComponentsLoadSpriteListener); } }

    public void AddGameComponentsLoadSpriteListener(System.Collections.Generic.List<IGameComponentsLoadSpriteListener> newValue) {
        var index = GameComponentsLookup.GameComponentsLoadSpriteListener;
        var component = (GameComponentsLoadSpriteListenerComponent)CreateComponent(index, typeof(GameComponentsLoadSpriteListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceGameComponentsLoadSpriteListener(System.Collections.Generic.List<IGameComponentsLoadSpriteListener> newValue) {
        var index = GameComponentsLookup.GameComponentsLoadSpriteListener;
        var component = (GameComponentsLoadSpriteListenerComponent)CreateComponent(index, typeof(GameComponentsLoadSpriteListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveGameComponentsLoadSpriteListener() {
        RemoveComponent(GameComponentsLookup.GameComponentsLoadSpriteListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGameComponentsLoadSpriteListener;

    public static Entitas.IMatcher<GameEntity> GameComponentsLoadSpriteListener {
        get {
            if (_matcherGameComponentsLoadSpriteListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GameComponentsLoadSpriteListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGameComponentsLoadSpriteListener = matcher;
            }

            return _matcherGameComponentsLoadSpriteListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddGameComponentsLoadSpriteListener(IGameComponentsLoadSpriteListener value) {
        var listeners = hasGameComponentsLoadSpriteListener
            ? gameComponentsLoadSpriteListener.value
            : new System.Collections.Generic.List<IGameComponentsLoadSpriteListener>();
        listeners.Add(value);
        ReplaceGameComponentsLoadSpriteListener(listeners);
    }

    public void RemoveGameComponentsLoadSpriteListener(IGameComponentsLoadSpriteListener value, bool removeComponentWhenEmpty = true) {
        var listeners = gameComponentsLoadSpriteListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveGameComponentsLoadSpriteListener();
        } else {
            ReplaceGameComponentsLoadSpriteListener(listeners);
        }
    }
}
