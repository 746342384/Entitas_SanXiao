//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity gameComponentsGameBoardEntity { get { return GetGroup(GameMatcher.GameComponentsGameBoard).GetSingleEntity(); } }
    public Game.Components.GameBoardComponent gameComponentsGameBoard { get { return gameComponentsGameBoardEntity.gameComponentsGameBoard; } }
    public bool hasGameComponentsGameBoard { get { return gameComponentsGameBoardEntity != null; } }

    public GameEntity SetGameComponentsGameBoard(int newColumns, int newRows) {
        if (hasGameComponentsGameBoard) {
            throw new Entitas.EntitasException("Could not set GameComponentsGameBoard!\n" + this + " already has an entity with Game.Components.GameBoardComponent!",
                "You should check if the context already has a gameComponentsGameBoardEntity before setting it or use context.ReplaceGameComponentsGameBoard().");
        }
        var entity = CreateEntity();
        entity.AddGameComponentsGameBoard(newColumns, newRows);
        return entity;
    }

    public void ReplaceGameComponentsGameBoard(int newColumns, int newRows) {
        var entity = gameComponentsGameBoardEntity;
        if (entity == null) {
            entity = SetGameComponentsGameBoard(newColumns, newRows);
        } else {
            entity.ReplaceGameComponentsGameBoard(newColumns, newRows);
        }
    }

    public void RemoveGameComponentsGameBoard() {
        gameComponentsGameBoardEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Components.GameBoardComponent gameComponentsGameBoard { get { return (Game.Components.GameBoardComponent)GetComponent(GameComponentsLookup.GameComponentsGameBoard); } }
    public bool hasGameComponentsGameBoard { get { return HasComponent(GameComponentsLookup.GameComponentsGameBoard); } }

    public void AddGameComponentsGameBoard(int newColumns, int newRows) {
        var index = GameComponentsLookup.GameComponentsGameBoard;
        var component = (Game.Components.GameBoardComponent)CreateComponent(index, typeof(Game.Components.GameBoardComponent));
        component.columns = newColumns;
        component.rows = newRows;
        AddComponent(index, component);
    }

    public void ReplaceGameComponentsGameBoard(int newColumns, int newRows) {
        var index = GameComponentsLookup.GameComponentsGameBoard;
        var component = (Game.Components.GameBoardComponent)CreateComponent(index, typeof(Game.Components.GameBoardComponent));
        component.columns = newColumns;
        component.rows = newRows;
        ReplaceComponent(index, component);
    }

    public void RemoveGameComponentsGameBoard() {
        RemoveComponent(GameComponentsLookup.GameComponentsGameBoard);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGameComponentsGameBoard;

    public static Entitas.IMatcher<GameEntity> GameComponentsGameBoard {
        get {
            if (_matcherGameComponentsGameBoard == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GameComponentsGameBoard);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGameComponentsGameBoard = matcher;
            }

            return _matcherGameComponentsGameBoard;
        }
    }
}
